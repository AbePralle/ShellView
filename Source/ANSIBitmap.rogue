uses Bitmap
uses Geometry
uses UI/ConsoleUI
uses Utility/Epilog
uses Utility/TextCanvas

class ANSIBitmap
  PROPERTIES
    width       : Int32
    height      : Int32
    even_height : Int32
    pixels      : Byte[]

  METHODS
    method init( source:Bitmap )
      width  = source.width
      height = source.height
      even_height = height + (height & 1)
      pixels = Byte[]( width*even_height )  # round up height to even # pixels
      pixels.count = width*height

      loop (width * (height&1)) pixels.add(ANSIColors.BLACK.index)  # odd # pixels get black bottom

      if (ShellView.command//options//dither)
        # Convert colors while applying Floyd-Steinberg dithering.
        # Make alternating/serpentine passes per row.
        # https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering
        local error = Dim<<RGB>>( (width+2) * (even_height+1) )

        local src_data  = source.pixels.data
        local src_i     = 0
        local src_w     = width
        local dest_data = pixels.data
        local err_data  = error.data
        local err_i     = 1
        local err_w     = width + 2

        forEach (j in 0..<height step 2)
          # Left to Right
          loop width
            local original = RGB( src_data[src_i] )
            local ansi  = (original + err_data[err_i])->ANSIColor
            local diff = original - RGB(ansi.color)
            err_data[ err_i+1 ]         = diff * (7.0/16.0)
            err_data[ err_i+(err_w-1) ] = diff * (3.0/16.0)
            err_data[ err_i+err_w ]     = diff * (5.0/16.0)
            err_data[ err_i+(err_w+1) ] = diff * (1.0/16.0)
            dest_data[ src_i ] = ansi.index
            ++src_i
            ++err_i
          endLoop
          src_i += (src_w - 1)
          err_i += (err_w - 1)
          if (j+1 == height) escapeForEach

          # Right to Left
          loop width
            local original = RGB( src_data[src_i] )
            local ansi  = (original + err_data[err_i])->ANSIColor
            local diff = original - RGB(ansi.color)
            err_data[ err_i-1 ]         = diff * (7.0/16.0)
            err_data[ err_i+(err_w+1) ] = diff * (3.0/16.0)
            err_data[ err_i+err_w ]     = diff * (5.0/16.0)
            err_data[ err_i+(err_w-1) ] = diff * (1.0/16.0)
            dest_data[ src_i ] = ansi.index
            --src_i
            --err_i
          endLoop
          src_i += src_w + 1
          err_i += err_w + 1
        endForEach

      else
        local lookup = ANSIColorLookup.data
        native @|RogueInt32* src = $source->pixels->data->as_int32s - 1;
                |RogueByte* dest = $pixels->data->as_bytes - 1;
                |RogueByte* lookup = $lookup->as_bytes;
                |
                |for (int i=$width*$height; --i>=0; )
                |{
                |  RogueInt32 argb = *(++src);
                |  *(++dest) = lookup[ ((argb & 0xF00000)>>12) | ((argb & 0xF000)>>8) | ((argb & 0xF0)>>4) ];
                |}
      endIf

    method to->TextCanvas
      local canvas = TextCanvas( width, even_height/2 )
      local canvas_data = canvas.buffer

      localize width
      local src_index = 0
      local dest_index = 0
      local FG_SHIFT = CharacterStyle.FG_SHIFT
      local BG_SHIFT = CharacterStyle.BG_SHIFT

      forEach (j in 0..<even_height/2)
        forEach (i in 0..<width)
          local bg = (Int32((pixels[src_index]))       + 1):<<: BG_SHIFT
          local fg = (Int32((pixels[src_index+width])) + 1):<<: FG_SHIFT
          canvas_data[ dest_index ] = StyledCharacter( '\[2584]', bg | fg )
          ++src_index
          ++dest_index
        endForEach
        src_index += width
      endForEach

      return canvas

    method size->XY
      return XY(width,height)

endClass

