uses Bitmap
uses Geometry
uses UI/ConsoleUI
uses Utility/Epilog
uses Utility/TextCanvas

class ANSIBitmap
  PROPERTIES
    source : Bitmap  # the true-color source bitmap
    width  : Int32
    height : Int32
    pixels : Byte[]

  METHODS
    method init( source )
      width  = source.width
      height = source.height
      pixels = Byte[]( width*(height+(height&1)) )
      pixels.count = width*height
      loop (width * (height&1)) pixels.add(1)  # odd # pixels get black bottom
      local lookup = ANSIColorLookup.data
      native @|RogueInt32* src = $source->pixels->data->as_int32s - 1;
              |RogueByte* dest = $pixels->data->as_bytes - 1;
              |RogueByte* lookup = $lookup->as_bytes;
              |
              |for (int i=$width*$height; --i>=0; )
              |{
              |  *(++dest) = lookup[ *(++src) & 0xFFffFF ];
              |}

    method to->TextCanvas
      local canvas = TextCanvas( width, (height+1)/2 )
      local canvas_data = canvas.buffer

      localize width
      local src_index = 0
      local dest_index = 0
      local FG_SHIFT = CharacterStyle.FG_SHIFT
      local BG_SHIFT = CharacterStyle.BG_SHIFT
      forEach (j in 0..<(height+1)/2)
        forEach (i in 0..<width)
          local bg = (pixels[src_index])       :<<: BG_SHIFT
          local fg = (pixels[src_index+width]) :<<: FG_SHIFT
          canvas_data[ dest_index ] = StyledCharacter( '\[2584]', bg | fg )
          ++src_index
          ++dest_index
        endForEach
        src_index += width
      endForEach

      return canvas

    method size->XY
      return XY(width,height)

endClass

