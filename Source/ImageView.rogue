uses Bitmap
uses UI/ConsoleUI
uses Utility/Epilog
uses Utility/TextCanvas

class ImageView : UIComponent
  PROPERTIES
    filepath      : String
    bitmap        : Bitmap
    text_bitmap   : TextCanvas
    min_scale     : Real64
    max_scale     : Real64
    image_pos     : XY
    image_size    : XY
    pointer_pos   : XY?
    zoom          = 0.0
    drag_origin   : XY?
    is_dragging   = false
    image_needs_update = false
    regenerate_image   = false
    should_center_image = true

  METHODS
    method init
      expand_to_fill

    method after_update_layout
      request_image_update

    method next_image
      ShellViewUI.filepaths.add( ShellViewUI.filepaths.remove_first )
      set_image( ShellViewUI.filepaths.last )

    method on( e:KeyEvent )
      if (e.is_press(Keycode.Q) or e.is_press(Keycode.ESCAPE)) System.exit

      if (e.is_press(Keycode.LEFT_ARROW) or e.is_press(Keycode.H) or e.is_press(Keycode.A))
        if (zoom == 0 or min_scale == max_scale)
          previous_image
        else
          image_pos += XY( size.x/3, 0 )
          request_image_update
        endIf
      elseIf (e.is_press(Keycode.RIGHT_ARROW) or e.is_press(Keycode.L) or e.is_press(Keycode.D))
        if (zoom == 0 or min_scale == max_scale)
          next_image
        else
          image_pos -= XY( size.x/3, 0 )
          request_image_update
        endIf
      elseIf (e.is_press(Keycode.DOWN_ARROW) or e.is_press(Keycode.J) or e.is_press(Keycode.S))
        image_pos -= XY( 0, size.y/3 )
        request_image_update
      elseIf (e.is_press(Keycode.UP_ARROW) or e.is_press(Keycode.K) or e.is_press(Keycode.W))
        image_pos += XY( 0, size.y/3 )
        request_image_update
      elseIf (e.is_press(Keycode.G))
        Shellview.command//options//grayscale = not Shellview.command//options//grayscale->Logical
        regenerate_image = true
        ANSIColorLookup.init  # recompute lookup table
        request_image_update
      elseIf (e.is_press(Keycode.I) or e.is_press(Keycode.EQUALS))
        zoom_in
      elseIf (e.is_press(Keycode.O) or e.is_press(Keycode.MINUS))
        zoom_out
      elseIf (e.is_press(Keycode.N) or e.is_press(Keycode.C))
        next_image
      elseIf (e.is_press(Keycode.B) or e.is_press(Keycode.Z))
        previous_image
      elseIf (e.is_press(Keycode.R))
        Shellview.command//options//dither = not Shellview.command//options//dither->Logical
        regenerate_image = true
        request_image_update
      endIf

    method on( e:PointerEvent )
      pointer_pos = e.position - display_position
      if (e.is_press)
        drag_origin = e.position
        is_dragging = false
      elseIf (e.is_release)
        if (not is_dragging)
          if (e.is_release(0))     zoom_in
          elseIf (e.is_release(1)) zoom_out
        endIf
        drag_origin = null
      elseIf (e.is_move)
        if (drag_origin)
          is_dragging = true
          image_pos += e.delta
          request_image_update
        endIf
      endIf

    method on( e:ScrollEvent )
      local scale = which{ System.is_macos:0.01 || 0.05 }
      zoom = (zoom + -e.delta.y*scale).clamped(0,1)
      request_image_update

    method previous_image
      ShellViewUI.filepaths.insert( ShellViewUI.filepaths.remove_last )
      set_image( ShellViewUI.filepaths.last )

    method request_image_update
      image_needs_update = true
      request_redraw

    method set_image( new_filepath:String )
      if (new_filepath == filepath) return
      filepath = new_filepath
      bitmap = Bitmap( File(filepath) )

      zoom = 0
      text_bitmap = null
      should_center_image = true
      request_image_update

    method update_image
      image_needs_update = false
      local bitmap_size = XY( bitmap.width, (bitmap.height+1)/2 )

      local anchor = RealXY(0.5,0.5)
      if (not image_size.is_zero)
        if (pointer_pos and text_bitmap)
          anchor = RealXY(pointer_pos.value - image_pos) / image_size
        else
          anchor = RealXY(size/2 - image_pos ) / image_size
        endIf
      endIf

      min_scale = (RealXY(size) / bitmap_size).min.clamped_high(1)
      max_scale = 1.0
      local scale = zoom.lerp(min_scale,max_scale)
      local new_size = (bitmap.size * scale)->XY
      local is_resizing = (not text_bitmap or text_bitmap.size != (new_size/XY(1,2)))
      if (is_resizing or regenerate_image)
        regenerate_image = false

        local work_bitmap = bitmap.resized( new_size )
        if (work_bitmap.height & 1)
          # Crop off the bottom if needed to ensure an even number of rows
          work_bitmap.crop( 0, 0, 0, &bottom=1 )
        endIf

        text_bitmap  = ANSIBitmap( work_bitmap, &dither=Shellview.command//options//dither->Logical )->TextCanvas
        image_size = XY( new_size.x, new_size.y/2 )
        if (should_center_image)
          should_center_image = false
          image_pos = ((size - image_size)/2)
        endIf
      endIf

      if (pointer_pos)
        image_pos = (pointer_pos.value - (anchor * image_size))
      elseIf (is_resizing)
        image_pos = (size/2 - (anchor * image_size))
      endIf

      local x = image_pos.x
      local y = image_pos.y
      if (image_size.x <= size.x)
        x = ((size.x - image_size.x)/2)
      else
        if (x > 0)
          x = 0
        elseIf (x + image_size.x < size.x)
          x = size.x - image_size.x
        endIf
      endIf
      if (image_size.y <= size.y)
        y = ((size.y - image_size.y)/2)
      else
        if (y > 0)
          y = 0
        elseIf (y + image_size.y < size.y)
          y = size.y - image_size.y
        endIf
      endIf
      image_pos = XY(x,y)

    method on_draw
      if (image_needs_update) update_image
      if (size.min == 0 or not text_bitmap) return

      if (Shellview.command//options//print)
        text_bitmap.display
      else
        ConsoleUICanvas.fill( display_bounds, ' ' )
        ConsoleUICanvas.draw( text_bitmap, image_pos )
      endIf

    method zoom_in
      if (min_scale == 0 or max_scale == 0) return
      if (min_scale == max_scale) zoom = min_scale; return

      local cur_scale = zoom.lerp( min_scale, max_scale )
      local new_scale = max_scale

      while (new_scale / 2 > cur_scale) new_scale /= 2
      zoom = ((new_scale - min_scale) / (max_scale - min_scale)).clamped(0,1)

      request_image_update

    method zoom_out
      if (min_scale == 0 or max_scale == 0) return
      if (min_scale == max_scale) zoom = min_scale; return

      local cur_scale = zoom.lerp( min_scale, max_scale )
      local new_scale = max_scale

      while (new_scale >= cur_scale) new_scale /= 2
      zoom = ((new_scale - min_scale) / (max_scale - min_scale)).clamped(0,1)

      request_image_update
endClass

